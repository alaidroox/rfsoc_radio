-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\untitled\tx_mod_ip_src_QAM16_Generator.vhd
-- Created: 2023-02-16 14:09:41
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tx_mod_ip_src_QAM16_Generator
-- Source Path: untitled/Modulation/Signal Generator/Variable Modulator/QAM16 Generator
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tx_mod_ip_src_QAM16_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Data                              :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        Reset_1                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        I_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Q_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END tx_mod_ip_src_QAM16_Generator;


ARCHITECTURE rtl OF tx_mod_ip_src_QAM16_Generator IS

  -- Signals
  SIGNAL Data_unsigned                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice2_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_bypass                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay1_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay1_bypass_next               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_delay_out                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice1_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Multiport_Switch1_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_bypass                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay2_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay2_bypass_next               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_delay_out                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  Data_unsigned <= unsigned(Data);

  Bit_Slice2_out1 <= Data_unsigned(1 DOWNTO 0);

  Constant1_out1 <= to_signed(16#4333#, 16);

  Constant2_out1 <= to_signed(16#1666#, 16);

  Constant3_out1 <= to_signed(-16#1666#, 16);

  Constant4_out1 <= to_signed(-16#4333#, 16);

  
  Multiport_Switch_out1 <= Constant1_out1 WHEN Bit_Slice2_out1 = to_unsigned(16#0#, 2) ELSE
      Constant2_out1 WHEN Bit_Slice2_out1 = to_unsigned(16#1#, 2) ELSE
      Constant3_out1 WHEN Bit_Slice2_out1 = to_unsigned(16#2#, 2) ELSE
      Constant4_out1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass <= to_signed(16#0000#, 16);
      Delay1_reg <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Enable = '1' THEN
          IF Reset_1 = '1' THEN
            Delay1_bypass <= to_signed(16#0000#, 16);
            Delay1_reg <= to_signed(16#0000#, 16);
          ELSE 
            Delay1_bypass <= Delay1_bypass_next;
            Delay1_reg <= Multiport_Switch_out1;
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Delay1_process;

  
  Delay1_delay_out <= to_signed(16#0000#, 16) WHEN Reset_1 = '1' ELSE
      Delay1_reg;
  
  Delay1_out1 <= Delay1_delay_out WHEN Enable = '1' ELSE
      Delay1_bypass;
  Delay1_bypass_next <= Delay1_delay_out;

  I_symbols <= std_logic_vector(Delay1_out1);

  Bit_Slice1_out1 <= Data_unsigned(3 DOWNTO 2);

  
  Multiport_Switch1_out1 <= Constant1_out1 WHEN Bit_Slice1_out1 = to_unsigned(16#0#, 2) ELSE
      Constant2_out1 WHEN Bit_Slice1_out1 = to_unsigned(16#1#, 2) ELSE
      Constant3_out1 WHEN Bit_Slice1_out1 = to_unsigned(16#2#, 2) ELSE
      Constant4_out1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_bypass <= to_signed(16#0000#, 16);
      Delay2_reg <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Enable = '1' THEN
          IF Reset_1 = '1' THEN
            Delay2_bypass <= to_signed(16#0000#, 16);
            Delay2_reg <= to_signed(16#0000#, 16);
          ELSE 
            Delay2_bypass <= Delay2_bypass_next;
            Delay2_reg <= Multiport_Switch1_out1;
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Delay2_process;

  
  Delay2_delay_out <= to_signed(16#0000#, 16) WHEN Reset_1 = '1' ELSE
      Delay2_reg;
  
  Delay2_out1 <= Delay2_delay_out WHEN Enable = '1' ELSE
      Delay2_bypass;
  Delay2_bypass_next <= Delay2_delay_out;

  Q_symbols <= std_logic_vector(Delay2_out1);

END rtl;

