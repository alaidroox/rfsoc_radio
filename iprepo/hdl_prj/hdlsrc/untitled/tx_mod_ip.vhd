-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\untitled\tx_mod_ip.vhd
-- Created: 2023-02-16 14:09:43
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tx_mod_ip
-- Source Path: tx_mod_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tx_mod_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TREADY         :   IN    std_logic;  -- ufix1
        modulation                        :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        enable                            :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TDATA          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_Master_TVALID         :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Master_TLAST          :   OUT   std_logic  -- ufix1
        );
END tx_mod_ip;


ARCHITECTURE rtl OF tx_mod_ip IS

  -- Component Declarations
  COMPONENT tx_mod_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tx_mod_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          modulation                      :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          enable                          :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          tdata                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          valid                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT tx_mod_ip_axi4_stream_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Master_TREADY       :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   IN    std_logic;  -- ufix1
          packet_size_axi4_stream_master  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Master_TDATA        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Master_TVALID       :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Master_TLAST        :   OUT   std_logic;  -- ufix1
          auto_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_mod_ip_reset_sync
    USE ENTITY work.tx_mod_ip_reset_sync(rtl);

  FOR ALL : tx_mod_ip_dut
    USE ENTITY work.tx_mod_ip_dut(rtl);

  FOR ALL : tx_mod_ip_axi4_stream_master
    USE ENTITY work.tx_mod_ip_axi4_stream_master(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL const_axi_enable                 : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL const_packet_size_axi4_stream_master : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL valid_sig                        : std_logic;  -- ufix1
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL auto_ready_axi4_stream_master    : std_logic;  -- ufix1
  SIGNAL auto_ready_dut_enb               : std_logic;  -- ufix1
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL tdata_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Stream_Master_TDATA_tmp     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_tx_mod_ip_reset_sync_inst : tx_mod_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset
              );

  u_tx_mod_ip_dut_inst : tx_mod_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => dut_enable,  -- ufix1
              modulation => modulation,  -- ufix8
              enable => enable,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              tdata => tdata_sig,  -- ufix32
              valid => valid_sig  -- ufix1
              );

  u_tx_mod_ip_axi4_stream_master_inst : tx_mod_ip_axi4_stream_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Master_TREADY => AXI4_Stream_Master_TREADY,  -- ufix1
              user_data => tdata_sig,  -- ufix32
              user_valid => top_user_valid,  -- ufix1
              packet_size_axi4_stream_master => std_logic_vector(const_packet_size_axi4_stream_master),  -- ufix32
              AXI4_Stream_Master_TDATA => AXI4_Stream_Master_TDATA_tmp,  -- ufix32
              AXI4_Stream_Master_TVALID => AXI4_Stream_Master_TVALID,  -- ufix1
              AXI4_Stream_Master_TLAST => AXI4_Stream_Master_TLAST,  -- ufix1
              auto_ready => auto_ready_axi4_stream_master  -- ufix1
              );

  const_axi_enable <= '1';

  const_1_1 <= '1';

  enb <= const_1_1;

  reset_cm <=  NOT IPCORE_RESETN;

  const_packet_size_axi4_stream_master <= to_unsigned(1024, 32);

  top_user_valid <= valid_sig;

  reg_process : PROCESS (IPCORE_CLK, reset)
  BEGIN
    IF reset = '1' THEN
      auto_ready_dut_enb <= '0';
    ELSIF IPCORE_CLK'EVENT AND IPCORE_CLK = '1' THEN
      IF enb = '1' THEN
        auto_ready_dut_enb <= auto_ready_axi4_stream_master;
      END IF;
    END IF;
  END PROCESS reg_process;


  dut_enable <= const_axi_enable AND auto_ready_dut_enb;

  AXI4_Stream_Master_TDATA <= AXI4_Stream_Master_TDATA_tmp;

END rtl;

