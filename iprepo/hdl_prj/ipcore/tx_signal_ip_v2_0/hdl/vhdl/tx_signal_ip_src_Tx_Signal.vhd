-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Tx_Signal\tx_signal_ip_src_Tx_Signal.vhd
-- Created: 2023-02-16 15:25:39
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-05
-- Target subsystem base rate: 1e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- (no clock)    0
-- ce_out        1e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- tdata                         ce_out        1e-05
-- valid                         ce_out        1e-05
-- s_tready                      (no clock)    inf
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tx_signal_ip_src_Tx_Signal
-- Source Path: Tx_Signal/Tx_Signal
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY tx_signal_ip_src_Tx_Signal IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        modulation                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        enable_tx                         :   IN    std_logic;
        enable_data                       :   IN    std_logic;
        s_tdata                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s_tvalid                          :   IN    std_logic;
        s_tlast                           :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        tdata                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        valid                             :   OUT   std_logic;
        s_tready                          :   OUT   std_logic
        );
END tx_signal_ip_src_Tx_Signal;


ARCHITECTURE rtl OF tx_signal_ip_src_Tx_Signal IS

  -- Component Declarations
  COMPONENT tx_signal_ip_src_Modulation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          modulation                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          enable_tx                       :   IN    std_logic;
          tdata                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT tx_signal_ip_src_AXIS_S
    PORT( s_tready                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_signal_ip_src_Modulation
    USE ENTITY work.tx_signal_ip_src_Modulation(rtl);

  FOR ALL : tx_signal_ip_src_AXIS_S
    USE ENTITY work.tx_signal_ip_src_AXIS_S(rtl);

  -- Signals
  SIGNAL Modulation_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Modulation_out2                  : std_logic;
  SIGNAL AXIS_S_out2                      : std_logic;

BEGIN
  u_Modulation : tx_signal_ip_src_Modulation
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              modulation => modulation,  -- uint16
              enable_tx => enable_tx,
              tdata => Modulation_out1,  -- uint32
              valid => Modulation_out2
              );

  u_AXIS_S : tx_signal_ip_src_AXIS_S
    PORT MAP( s_tready => AXIS_S_out2
              );

  ce_out <= clk_enable;

  tdata <= Modulation_out1;

  valid <= Modulation_out2;

  s_tready <= AXIS_S_out2;

END rtl;

