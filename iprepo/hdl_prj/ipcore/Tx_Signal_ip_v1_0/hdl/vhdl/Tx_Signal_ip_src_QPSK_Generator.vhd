-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Tx_Signal\Tx_Signal_ip_src_QPSK_Generator.vhd
-- Created: 2023-02-16 15:23:47
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Tx_Signal_ip_src_QPSK_Generator
-- Source Path: Tx_Signal/Tx_Signal/Modulation/Signal Generator/Variable Modulator/QPSK Generator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Tx_Signal_ip_src_QPSK_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Data                              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Reset_1                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        I_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Q_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END Tx_Signal_ip_src_QPSK_Generator;


ARCHITECTURE rtl OF Tx_Signal_ip_src_QPSK_Generator IS

  -- Signals
  SIGNAL Data_unsigned                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_bypass                     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay_reg                        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay_bypass_next                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_delay_out                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch1_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_bypass                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay1_reg                       : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay1_bypass_next               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_delay_out                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  Data_unsigned <= unsigned(Data);

  Constant4_out1 <= to_signed(16#2D41#, 16);

  Constant1_out1 <= to_signed(-16#2D41#, 16);

  
  Multiport_Switch_out1 <= Constant4_out1 WHEN Data_unsigned = to_unsigned(16#0#, 2) ELSE
      Constant1_out1 WHEN Data_unsigned = to_unsigned(16#1#, 2) ELSE
      Constant4_out1 WHEN Data_unsigned = to_unsigned(16#2#, 2) ELSE
      Constant1_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass <= to_signed(16#0000#, 16);
      Delay_reg <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Enable = '1' THEN
          IF Reset_1 = '1' THEN
            Delay_bypass <= to_signed(16#0000#, 16);
            Delay_reg <= to_signed(16#0000#, 16);
          ELSE 
            Delay_bypass <= Delay_bypass_next;
            Delay_reg <= Multiport_Switch_out1;
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Delay_process;

  
  Delay_delay_out <= to_signed(16#0000#, 16) WHEN Reset_1 = '1' ELSE
      Delay_reg;
  
  Delay_out1 <= Delay_delay_out WHEN Enable = '1' ELSE
      Delay_bypass;
  Delay_bypass_next <= Delay_delay_out;

  I_symbols <= std_logic_vector(Delay_out1);

  
  Multiport_Switch1_out1 <= Constant4_out1 WHEN Data_unsigned = to_unsigned(16#0#, 2) ELSE
      Constant4_out1 WHEN Data_unsigned = to_unsigned(16#1#, 2) ELSE
      Constant1_out1 WHEN Data_unsigned = to_unsigned(16#2#, 2) ELSE
      Constant1_out1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass <= to_signed(16#0000#, 16);
      Delay1_reg <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Enable = '1' THEN
          IF Reset_1 = '1' THEN
            Delay1_bypass <= to_signed(16#0000#, 16);
            Delay1_reg <= to_signed(16#0000#, 16);
          ELSE 
            Delay1_bypass <= Delay1_bypass_next;
            Delay1_reg <= Multiport_Switch1_out1;
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS Delay1_process;

  
  Delay1_delay_out <= to_signed(16#0000#, 16) WHEN Reset_1 = '1' ELSE
      Delay1_reg;
  
  Delay1_out1 <= Delay1_delay_out WHEN Enable = '1' ELSE
      Delay1_bypass;
  Delay1_bypass_next <= Delay1_delay_out;

  Q_symbols <= std_logic_vector(Delay1_out1);

END rtl;

